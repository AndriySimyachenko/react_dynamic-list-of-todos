{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","URL","TodoList","props","useState","todos","setTodos","input","setInput","all","status","setStatus","useEffect","fetch","then","response","ok","json","Promise","reject","filteredTodos","filter","todo","title","toLowerCase","includes","filterOption","active","completed","handleOptions","className","type","value","onChange","event","target","map","checked","readOnly","onClick","chahgeSelectedUserId","userId","selectedUserId","id","CurrentUser","userID","newUserSelected","userInfo","setUserInfo","catch","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd76561d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\nimport { getAllTodos } from '../../api';\n\ninterface Props {\n  selectedUserId: number,\n  chahgeSelectedUserId: (id: number) => void,\n}\n\nenum Options {\n  all,\n  active,\n  completed,\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [input, setInput] = useState('');\n  const [status, setStatus] = useState(Options.all);\n\n  useEffect(() => {\n    getAllTodos()\n      .then(response => setTodos(response));\n  }, []);\n\n  const handleOptions = (filterOption: Options, todo: Todo) => {\n    switch (filterOption) {\n      case Options.active:\n        return todo.completed === false;\n      case Options.completed:\n        return todo.completed === true;\n      default:\n        return true;\n    }\n  };\n\n  const filteredTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(input.toLowerCase())\n    && handleOptions(status, todo));\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(event) => {\n            setInput(event.target.value);\n          }}\n        />\n\n        <select\n          value={status}\n          onChange={(event) => {\n            setStatus(+event.target.value);\n          }}\n        >\n          <option value={Options.all}>All</option>\n          <option value={Options.active}>Active</option>\n          <option value={Options.completed}>Completed</option>\n        </select>\n\n        <ul className=\"TodoList__list\">\n          {\n            filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={`\n              TodoList__item\n              ${todo.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{ todo.title }</p>\n                </label>\n\n                <button\n                  onClick={() => props.chahgeSelectedUserId(todo.userId)}\n                  className={`\n                  button\n                    ${props.selectedUserId === todo.userId ? 'TodoList__user-button--selected' : 'TodoList__user-button'}\n                  `}\n                  type=\"button\"\n                >\n                  User#\n                  {todo.userId}\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo, User } from './react-app-env';\n\nexport const URL = 'https://mate.academy/students-api';\n\nexport const getAllTodos = (): Promise<Todo[]> => {\n  return fetch(`${URL}/todos`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUserID = (id: number): Promise<User> => {\n  return fetch(`${URL}/users/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserID } from '../../api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userID: number,\n  newUserSelected: (id: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userID, newUserSelected }) => {\n  const [userInfo, setUserInfo] = useState<User | null>();\n\n  useEffect(() => {\n    getUserID(userID)\n      .then(response => setUserInfo(response))\n      .catch(() => {\n        newUserSelected(0);\n        setUserInfo(null);\n      });\n  }, [userID]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {' '}\n          {userID}\n        </span>\n\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">\n        {userInfo?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {userInfo?.email}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {userInfo?.phone}\n      </p>\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          newUserSelected(0);\n        }}\n      >\n        Clear\n      </button>\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const chahgeSelectedUserId = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          chahgeSelectedUserId={chahgeSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userID={selectedUserId}\n              newUserSelected={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}